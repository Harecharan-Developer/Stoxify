CREATE TABLE users (
  user_id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  total_profit_loss DECIMAL(10,2) DEFAULT 0.00
);

CREATE TABLE stockdata (
  stock_id INT AUTO_INCREMENT PRIMARY KEY,
  company_name VARCHAR(255) NOT NULL,
  ticker VARCHAR(20) NOT NULL UNIQUE,
  min_sprice DECIMAL(10,2),
  max_sprice DECIMAL(10,2),
  current_sprice DECIMAL(10,2),
  last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


CREATE TABLE portfolio (
  user_id INT,
  stock_id INT,
  quantity INT NOT NULL,
  avg_buy_price DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (user_id, stock_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (stock_id) REFERENCES stockdata(stock_id) ON DELETE CASCADE
);

CREATE TABLE transactions (
  transaction_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  stock_id INT,
  type ENUM('BUY', 'SELL') NOT NULL,
  quantity INT NOT NULL,
  price_at_transaction DECIMAL(10,2) NOT NULL,
  transaction_time DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (stock_id) REFERENCES stockdata(stock_id) ON DELETE CASCADE
);


CREATE TABLE watchlist (
  user_id INT,
  stock_id INT,
  PRIMARY KEY (user_id, stock_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (stock_id) REFERENCES stockdata(stock_id) ON DELETE CASCADE
);


CREATE TABLE gtt_orders (
  gtt_id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT,
  stock_id INT,
  target_price DECIMAL(10,2) NOT NULL,
  action ENUM('BUY', 'SELL') NOT NULL,
  quantity INT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (stock_id) REFERENCES stockdata(stock_id) ON DELETE CASCADE
);


INSERT INTO users (username, password, balance)
VALUES ('testuser', 'password123', 100000.00);

INSERT INTO stockdata (company_name, ticker, min_sprice, max_sprice, current_sprice)
VALUES 
('Apple Inc.', 'AAPL', 150.00, 200.00, 175.00),
('Tesla Inc.', 'TSLA', 600.00, 900.00, 750.00),
('Amazon.com Inc.', 'AMZN', 100.00, 150.00, 120.00),
('Google LLC', 'GOOGL', 2500.00, 3000.00, 2800.00),
('Microsoft Corp.', 'MSFT', 280.00, 320.00, 300.00),
('Meta Platforms Inc.', 'META', 250.00, 350.00, 325.00),
('Netflix Inc.', 'NFLX', 400.00, 500.00, 460.00),
('Nvidia Corp.', 'NVDA', 500.00, 800.00, 700.00),
('PayPal Holdings', 'PYPL', 60.00, 90.00, 75.00),
('Intel Corp.', 'INTC', 30.00, 50.00, 45.00);


INSERT INTO portfolio (user_id, stock_id, quantity, avg_buy_price)
VALUES 
(1, 1, 10, 170.00),   -- AAPL
(1, 2, 5, 720.00),    -- TSLA
(1, 4, 2, 2700.00);   -- GOOGL


INSERT INTO transactions (user_id, stock_id, type, quantity, price_at_transaction, transaction_time)
VALUES
  (1, 1, 'BUY', 10, 170.00, NOW()),   -- AAPL
  (1, 2, 'BUY', 5, 720.00, NOW()),    -- TSLA
  (1, 2, 'SELL', 2, 740.00, NOW()),   -- TSLA
  (1, 4, 'BUY', 2, 2700.00, NOW());   -- GOOG



INSERT INTO watchlist (user_id, stock_id)
VALUES 
(1, 3),   -- AMZN
(1, 5),   -- MSFT
(1, 6);   -- META

INSERT INTO gtt_orders (user_id, stock_id, target_price, action, quantity)
VALUES
  (1, 1, 160.00, 'BUY', 10),     -- AAPL, buy if price drops to 160
  (1, 2, 750.00, 'SELL', 3),     -- TSLA, sell if price reaches 750
  (1, 3, 3400.00, 'SELL', 1),    -- AMZN
  (1, 4, 2500.00, 'BUY', 2),     -- GOOG
  (1, 5, 295.00, 'BUY', 5);      -- MSFT


